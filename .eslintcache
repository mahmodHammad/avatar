[{"/Users/admin/Desktop/solar/src/index.js":"1","/Users/admin/Desktop/solar/src/serviceWorker.js":"2","/Users/admin/Desktop/solar/src/App.js":"3","/Users/admin/Desktop/solar/src/UI.js":"4","/Users/admin/Desktop/solar/src/Cat.js":"5","/Users/admin/Desktop/solar/src/AvatarChange.js":"6","/Users/admin/Desktop/solar/src/setup.js":"7","/Users/admin/Desktop/solar/src/Animate.js":"8","/Users/admin/Desktop/solar/src/helpers.js":"9","/Users/admin/Desktop/solar/src/settings.js":"10","/Users/admin/Desktop/solar/src/ScreenShot.js":"11","/Users/admin/Desktop/solar/src/sceneItems.js":"12","/Users/admin/Desktop/solar/src/ModelLoader.js":"13","/Users/admin/Desktop/solar/src/UI/AvatarChangeColor.js":"14","/Users/admin/Desktop/solar/src/UI/AvatarChangeVisible.js":"15"},{"size":481,"mtime":1617064550418,"results":"16","hashOfConfig":"17"},{"size":5182,"mtime":1617064550460,"results":"18","hashOfConfig":"17"},{"size":248,"mtime":1617139549286,"results":"19","hashOfConfig":"17"},{"size":2397,"mtime":1617473341510,"results":"20","hashOfConfig":"17"},{"size":878,"mtime":1617338637614,"results":"21","hashOfConfig":"17"},{"size":2048,"mtime":1617338637614,"results":"22","hashOfConfig":"17"},{"size":4232,"mtime":1617494349143,"results":"23","hashOfConfig":"17"},{"size":623,"mtime":1617491507564,"results":"24","hashOfConfig":"17"},{"size":846,"mtime":1617356404388,"results":"25","hashOfConfig":"17"},{"size":325,"mtime":1617491278590,"results":"26","hashOfConfig":"17"},{"size":866,"mtime":1617126901785,"results":"27","hashOfConfig":"17"},{"size":5112,"mtime":1617490376844,"results":"28","hashOfConfig":"17"},{"size":1018,"mtime":1617354114569,"results":"29","hashOfConfig":"17"},{"size":1658,"mtime":1617472538084,"results":"30","hashOfConfig":"17"},{"size":1863,"mtime":1617474097065,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"gwidjz",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"/Users/admin/Desktop/solar/src/index.js",[],["71","72"],"/Users/admin/Desktop/solar/src/serviceWorker.js",[],"/Users/admin/Desktop/solar/src/App.js",[],"/Users/admin/Desktop/solar/src/UI.js",["73","74","75","76","77","78"],"import React ,{useState}from \"react\";\nimport \"./App.css\";\nimport AvatarChangeColor from \"./UI/AvatarChangeColor\"\nimport AvatarChangeVisible from \"./UI/AvatarChangeVisible\"\n\nimport BGChange from \"./AvatarChange\"\nimport {render} from \"./setup\"\n\n\nconst hairColors={\n  indigo:0x3D5AFE,\n  red:0xff5050,\n  Purple:0x651FFF,\n  gray:0x282828,\n  lol:0xdc95dc,\n  \"light blue\":0xb4cdff,\n  pink:0xfe5caa,\n  cyan:0x3264c8\n}\nconst faceColors={\n    Skin1:0xc58c85,\n    Skin2:0xecbcb4,\n    Skin3:0xd1a3a4,\n    Skin4:0xa1665e,\n    Skin5:0x503335,\n    Skin6:0x592f2a,\n}\n\nconst clothColors={\n    gray: 0x888888,\n    Green1:0x69F0AE,\n    Purple:0x651FFF,\n    indigo:0x3D5AFE,\n    coolRed:0xFF1744,\n}\n\nconst Colors ={\n  yellow:0xFFEB3B,\n  gray: 0xaaaaaa,\n  Green1:0x69F0AE,\n  cyan:0x00E5FF,\n  Teal:0x1DE9B6,\n  Purple:0x651FFF,\n  indigo:0x3D5AFE,\n  coolRed:0xFF1744,\n  Pink:0xF50057,\n\n};\n\n\n\nvar gluesethair ,gluesetface,gluesetcloth,gluesethat,gluesethair_mask\n\nfunction extract(atrr){\n    console.log(\"HEY YOU FUCK\",atrr)\n    // face = atrr.face\n    \n   const {hair,face,cloth,hat,hair_mask} = atrr\n    gluesethair(hair)\n    gluesetface(face)\n    gluesetcloth(cloth)\n    gluesethat(hat)\n    gluesethair_mask(hair_mask)\n    // cloth = atrr.cloth\n    return atrr\n}\n\nfunction UI() {\nconst [hair, sethair] = useState(undefined);\nconst [hat, sethat] = useState(undefined);\nconst [face, setface] = useState(undefined);\nconst [cloth, setcloth] = useState(undefined);\nconst [hair_mask, sethair_mask] = useState(undefined);\n\ngluesethair =sethair\ngluesetface=setface\ngluesetcloth = setcloth\ngluesethat = sethat\ngluesethair_mask = sethair_mask\n\nconst Allhairs={\n  bold:{visible:[]},\n  hair:{visible:[hair]},\n  hat:{visible:[hat,hair_mask]}\n}\n\n  return (\n      <React.Fragment>\n        <div className=\"l-panel panel\">\n            {/* {hair!==undefined?<AvatarChange title=\"Hair Color\" mesh={hair}   colors={hairColors}/>:null}\n            {face!==undefined?  <AvatarChange title=\"Face Color\" mesh={face}  colors={faceColors}/>:null} */}\n\n        </div>\n         <div className=\"r-panel panel\">\n         {/* {face!==undefined?<AvatarChange title=\"Cloth Color\" mesh={cloth} colors={clothColors}/> :null} */}\n          <AvatarChangeVisible title=\"hair style\" Allmeshes={Allhairs}/>\n         <BGChange title=\"Background Color\" mesh={cloth} colors={Colors}/> \n        </div> \n        </React.Fragment>\n  );\n}\n\nexport  {UI,extract};\n\n\n\n\n","/Users/admin/Desktop/solar/src/Cat.js",["79","80","81"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { sceneSetup, scene ,takeScreenshot} from \"./setup\";\nimport { startAnimationLoop } from \"./Animate\";\n// import SH from \"./ScreenShoot\"\n\nexport default function Cat({ handleFullScreen }) {\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    const canvasTarget = textInput.current;\n    sceneSetup(canvasTarget);\n    // setInterval(startAnimationLoop,1000)\n    startAnimationLoop()\n    \n  }, []);\n\n  return (\n    <React.Fragment>\n      <div ref={textInput} className=\"canvas\"></div>\n     <div className=\"box\">\n\n      <button className=\"SH\" onClick={()=>takeScreenshot(1028*2 ,1028*2 )} className=\"SH\">Download image</button>\n</div>\n    </React.Fragment>\n  );\n}\n\n//clean up to prevent memory leak\n//   componentWillUnmount() {\n//     window.cancelAnimationFrame(requestID);\n//     controls.dispose();\n//   }\n","/Users/admin/Desktop/solar/src/AvatarChange.js",["82","83","84","85","86"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { sceneSetup, scene, changeSceneBackground ,takeScreenshot ,render} from \"./setup\";\n\n\nexport default function AC({ title , mesh , colors  }) {\n  const bgs = {\n    gray: 0xaaaaaa,\n    yellow:0xFFEB3B,\n    Green1:0x69F0AE,\n    cyan:0x00E5FF,\n    Teal:0x1DE9B6,\n    Purple:0x651FFF,\n    indigo:0x3D5AFE,\n    coolRed:0xFF1744,\n    Pink:0xF50057,\n    red: 0xff0000,\n    green: 0x00ff00,\n    blue: 0x0000ff,\n  };\n  const bgsNames = Object.keys(bgs);\n\n  const [activeBGIndex, setactiveBGIndex] = useState(0);\n  useEffect(() => {\n    changeSceneBackground(bgs[bgsNames[activeBGIndex]]);\n  }, []);\n\n  function syencChangeBackground(index) {\n    setactiveBGIndex(index);\n    changeSceneBackground(bgs[bgsNames[index]]);\n    render()\n  }\n\n  function onBGChange(index) {\n    //   index == 1 => left , index==0 => right\n\n    if (index) {\n      activeBGIndex < bgsNames.length - 1\n        ? syencChangeBackground(activeBGIndex + 1)\n        : syencChangeBackground(0);\n    } else {\n        activeBGIndex > 0\n        ? syencChangeBackground(activeBGIndex - 1)\n        : syencChangeBackground(bgsNames.length - 1);\n    }\n  }\n\n  return (\n      \n    <div className=\"box\">\n        <div className=\"title\">{title}</div>\n        <div className=\"change\">\n            <button className=\"l-btn btn\" onClick={()=>onBGChange(0)}>{`<`}</button>\n            <span className=\"center\">{bgsNames[activeBGIndex]}</span>\n            <button className=\"r-btn btn\" onClick={()=>onBGChange(1)}>{`>`}</button>\n        </div>\n    </div>\n    // <div className=\"container\">\n    //   <button onClick={() => onBGChange(0)}>{`<`}</button>\n    //   <span className=\"title\">{bgsNames[activeBGIndex]}</span>\n    //   <button onClick={() => onBGChange(1)}>{`>`}</button>\n      // <button onClick={()=>takeScreenshot(2000 ,2000 )} className=\"SH\">Take SH</button>\n    // </div>\n  );\n}\n\n\n//clean up to prevent memory leak\n//   componentWillUnmount() {\n//     window.cancelAnimationFrame(requestID);\n//     controls.dispose();\n//   }\n","/Users/admin/Desktop/solar/src/setup.js",[],"/Users/admin/Desktop/solar/src/Animate.js",["87","88","89","90"],"// اشطر\nimport * as THREE from \"three\";\nimport { stats, render, controls } from \"./setup\";\nvar clock = new THREE.Clock();\nlet generalTime = 0;\n\n\nlet requestID;\n// this function is heavy , OPTIMIZE it as could as possible\nconst startAnimationLoop = (e) => {\n  //   console.log(\"EEEE:\",e)\n  //   material.uniforms.time.value = e/10000;\n  // console.log(clock.elapsedTime)\n  // stats.begin();\n  // generalTime = clock.elapsedTime;\n\n  // render();\n  \n  // controls.update();\n  // stats.end();\n  requestID = window.requestAnimationFrame(startAnimationLoop);\n};\n\nexport {\n  startAnimationLoop,\n  requestID,\n  generalTime,\n};\n","/Users/admin/Desktop/solar/src/helpers.js",[],"/Users/admin/Desktop/solar/src/settings.js",[],"/Users/admin/Desktop/solar/src/ScreenShot.js",[],"/Users/admin/Desktop/solar/src/sceneItems.js",["91","92"],"import * as THREE from \"three\";\nimport { scene ,render,renderer} from \"./setup\";\nimport { loadModel } from \"./ModelLoader\";\nimport {extract} from \"./UI\"\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\n// const hat = require(\"./Example_all feature.glb\").default;\n// const earth = require(\"./Avatar3.glb\").default;\nconst earth = require(\"./Avatar5.glb\").default;\n// const earth = require(\"./model/f.glb\").default;\nconst hdrbg = require(\"./model/Texture/courtyard_2k.hdr\")\nvar face, hair, cloth\n\nfunction addBacklight(){\n    const tl = new THREE.PointLight(0xffffff,0.4)\n    const bl = new THREE.PointLight(0xffffff,0.4)\n    const tr = new THREE.PointLight(0xffffff,0.2)\n    const br = new THREE.PointLight(0xffffff,0.2)\n    const xd = 3\n    const zd = 4\n    const yd = 3\n    const rightShift = 1\n    tl.position.set(xd+rightShift,yd+rightShift,-zd)\n    tr.position.set(-xd+rightShift,yd+rightShift,-zd)\n    bl.position.set(xd+rightShift,-yd+rightShift,-zd)\n    br.position.set(-xd+rightShift,-yd+rightShift,-zd)\n\n    tl.castShadow = true\n    tr.castShadow = true\n    bl.castShadow = true\n    br.castShadow = true\n  \n  scene.add(tl)\n  scene.add(tr)\n  scene.add(bl)\n  scene.add(br)\n\n// scene.add(new THREE.PointLightHelper(tl))\n// scene.add(new THREE.PointLightHelper(tr))\n// scene.add(new THREE.PointLightHelper(bl))\n// scene.add(new THREE.PointLightHelper(br))\n}\n\n\nfunction setHDRLighting(){\n  new RGBELoader()\n  .setDataType( THREE.UnsignedByteType ) // alt: FloatType, HalfFloatType\n  .load( hdrbg.default, function ( texture, textureData ) {\n    var envMap = pmremGenerator.fromEquirectangular( texture ).texture;\n    // scene.background = envMap;\n    scene.environment = envMap;\n    texture.dispose();\n    pmremGenerator.dispose();\n    render();\n  } );\n  var pmremGenerator = new THREE.PMREMGenerator( renderer );\n  pmremGenerator.compileEquirectangularShader();\n}\n\nfunction setDirectionalLighting(){\n  const dirLight = new THREE.DirectionalLight( 0xdddddd, 0.6 );\n  dirLight.position.set( 3, 2.5, 4 );\n  dirLight.castShadow = true;\n  dirLight.shadow.camera.near = 0.1;\n  dirLight.shadow.camera.far = 500;\n  const lightDist = 17\n  dirLight.shadow.camera.right = lightDist;\n  dirLight.shadow.camera.left = - lightDist;\n  dirLight.shadow.camera.top\t= lightDist;\n  dirLight.shadow.camera.bottom = - lightDist;\n  dirLight.shadow.mapSize.width = 512*4;\n  dirLight.shadow.mapSize.height = 512*4;\n  dirLight.shadow.radius = 4;\n  // dirLight.shadow.bias = - 0.0005;\n  scene.add( dirLight );\n}\n\nfunction addLights() {\n  // addBacklight()\n  setHDRLighting()\n  setDirectionalLighting()\n\n  const rectLight = new THREE.PointLight( 0xffffff,1 );\n  rectLight.position.set( 0, -3, 5 );\n  rectLight.lookAt( 0, 0, 0 );\n// scene.add(rectLight)\n}\n\nconst addItem = () => {\n  loadModel(earth , {x:0,y:0,z:0})\n    .then((e) => {\n      function extractMesh(name){\n        return e.scene.getChildByName(name)\n      }\n   \n      cloth = extractMesh(\"cloth\")\n       face = extractMesh(\"face\")\n       hair = extractMesh(\"hair\")\n      // const bg  = extractMesh(\"bg\")\n      const hair_mask = extractMesh(\"hair_mask\")\n\n      const hat = extractMesh(\"hat\")\n      // const hat_mask = extractMesh(\"hat_mask\")\n      // const tounge = extractMesh(\"Roundcube006\")\n      const nose = extractMesh(\"nose\")\n      // const nech = extractMesh(\"Cylinder\")\n      const ear = extractMesh(\"ears\")\n      const eye = extractMesh(\"eye\")\n      const eyebrow = extractMesh(\"eyebrows\")\n\n\n      // cloth.castShadow = true; \n      // cloth.receiveShadow = true;\n      // cloth.material.color = new THREE.Color(0x888888)\n\n\n      // face.castShadow = true; \n      face.receiveShadow = true;\n      // face.material.color = new THREE.Color(0xc58c85)\n\n       hair.castShadow = true; \n      //  hair.material.roughness = 0.5\n      //  hair.receiveShadow = false;\n      // hair.material.color = new THREE.Color(0x3D5AFE)\n      \n      nose.castShadow = true; \n\n      // tounge.receiveShadow = true\n      // tounge.material.color = new THREE.Color(0xaa5555)\n\n      // ear.receiveShadow = true\n      // nech.receiveShadow =true\n      // eyebrow.receiveShadow = true\n      eyebrow.castShadow = true\n      eye.castShadow = true\n      \n    // face.material = new THREE.MeshPhongMaterial( { \n    //     // color: 0x996633,\n    //     // envMap: envMap, // optional environment map\n    //     specular: 0x050505,\n    //     shininess: 100\n    // } ) \n    // face.material.roughness = 0\n    // cloth.material.roughness = 0\n    face.material.skinning = true\n      // eye.material.color = new THREE.Color(0x333333)\n      // eyebrow.material.color = new THREE.Color(0x444444)\n      // bg.visible = false\n      // hat_mask.visible = false\n\n      // overlay start\n      hat.castShadow = true\n      hair_mask.castShadow=false\n      hair_mask.receiveShadow = true\n      hair_mask.castShadow = true\n      hair_mask.visible =false\n      hat.visible = false\n      hair.visible= false\n      console.log(\"hair\",hair)\n\n      scene.add(e.scene);\n      extract({cloth,face,hair,hair_mask,hat})\n\n      render()\n    })\n  addLights();\n};\n\nexport { addItem ,face, hair, cloth };\n","/Users/admin/Desktop/solar/src/ModelLoader.js",[],["93","94"],"/Users/admin/Desktop/solar/src/UI/AvatarChangeColor.js",["95","96"],"import * as THREE from \"three\";\nimport React, { useState,useEffect} from \"react\";\nimport { sceneSetup, scene ,render} from \"../setup\";\n\nfunction changeColor(mesh,color){\n  console.log(\"Change color\", mesh)\n  mesh.material.color = new THREE.Color(color)\n}\n\n// changeColor(cloth,0xf07f7f)\n// changeColor(cloth,0x714141)\n// changeColor(hair,0x4e1325)\n// changeColor(face,0xa5977e)\n\nexport default function Cat({ title , mesh , colors  }) {\n  const colNames = Object.keys(colors);\n\n  const [activeBGIndex, setactiveBGIndex] = useState(0);\n  useEffect(() => {\n    // changeColor(mesh,colors[colNames[activeBGIndex]])\n    // changeSceneBackground(colors[colNames[activeBGIndex]]);\n  }, []);\n\n  function syencChangeBackground(index) {\n    setactiveBGIndex(index);\n    changeColor(mesh,colors[colNames[index]])\n    render()\n\n    // changeSceneBackground(colors[colNames[index]]);\n  }\n\n  function handleChange(index) {\n    //   index == 1 => left , index==0 => right\n\n    if (index) {\n      activeBGIndex < colNames.length - 1\n        ? syencChangeBackground(activeBGIndex + 1)\n        : syencChangeBackground(0);\n    } else {\n        activeBGIndex > 0\n        ? syencChangeBackground(activeBGIndex - 1)\n        : syencChangeBackground(colNames.length - 1);\n    }\n  }\n\n\n  return (\n    \n    <div className=\"box\">\n        <div className=\"title\">{title}</div>\n        <div className=\"change\">\n            <button className=\"l-btn btn\" onClick={()=>handleChange(1)}>{`<`}</button>\n            <span className=\"center\">{colNames[activeBGIndex]}</span>\n            <button className=\"r-btn btn\" onClick={()=>handleChange(0)}>{`>`}</button>\n        </div>\n    </div>\n  );\n}\n","/Users/admin/Desktop/solar/src/UI/AvatarChangeVisible.js",["97","98","99"],"import * as THREE from \"three\";\nimport React, { useState,useEffect} from \"react\";\nimport { sceneSetup, scene ,render} from \"../setup\";\n\nfunction hideAllhair(hairs){\n    const meshNames = Object.keys(hairs);\n     meshNames.forEach(meshname=>{\n      hairs[meshname].visible.forEach(hvisible=> hvisible.visible=false)\n    })    \n  }\n\n  function show(hairs,hair){\n      console.log(hairs,hair)\n    hideAllhair(hairs)\n    hair.visible.forEach(hvisible=>{\n        hvisible.visible=true\n    })\n    render()\n  }\n\nexport default function AvatarVisible({ title , Allmeshes   }) {\n  const meshNames = Object.keys(Allmeshes);\n\n  const [activeMeshIndex, setactiveMeshIndex] = useState(0);\n  useEffect(() => {\n    // changeColor(mesh,Allmeshes[meshNames[activeMeshIndex]])\n    // syencChangeBackground(0)\n    // changeSceneBackground(Allmeshes[meshNames[activeMeshIndex]]);\n  }, []);\n\n  function syencChangeBackground(index) {\n    setactiveMeshIndex(index);\n    show(Allmeshes,Allmeshes[meshNames[index]])\n    render()\n\n    // changeSceneBackground(Allmeshes[meshNames[index]]);\n  }\n\n  function handleChange(index) {\n    //   index == 1 => left , index==0 => right\n    if (index) {\n      activeMeshIndex < meshNames.length - 1\n        ? syencChangeBackground(activeMeshIndex + 1)\n        : syencChangeBackground(0);\n    } else {\n        activeMeshIndex > 0\n        ? syencChangeBackground(activeMeshIndex - 1)\n        : syencChangeBackground(meshNames.length - 1);\n    }\n  }\n\n\n  return (\n    \n    <div className=\"box\">\n        <div className=\"title\">{title}</div>\n        <div className=\"change\">\n            <button className=\"l-btn btn\" onClick={()=>handleChange(1)}>{`<`}</button>\n            <span className=\"center\">{meshNames[activeMeshIndex]}</span>\n            <button className=\"r-btn btn\" onClick={()=>handleChange(0)}>{`>`}</button>\n        </div>\n    </div>\n  );\n}\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":25},{"ruleId":"104","severity":1,"message":"108","line":7,"column":9,"nodeType":"106","messageId":"107","endLine":7,"endColumn":15},{"ruleId":"104","severity":1,"message":"109","line":10,"column":7,"nodeType":"106","messageId":"107","endLine":10,"endColumn":17},{"ruleId":"104","severity":1,"message":"110","line":20,"column":7,"nodeType":"106","messageId":"107","endLine":20,"endColumn":17},{"ruleId":"104","severity":1,"message":"111","line":29,"column":7,"nodeType":"106","messageId":"107","endLine":29,"endColumn":18},{"ruleId":"104","severity":1,"message":"112","line":71,"column":8,"nodeType":"106","messageId":"107","endLine":71,"endColumn":12},{"ruleId":"104","severity":1,"message":"113","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"114","line":2,"column":22,"nodeType":"106","messageId":"107","endLine":2,"endColumn":27},{"ruleId":"115","severity":1,"message":"116","line":22,"column":76,"nodeType":"117","endLine":22,"endColumn":90},{"ruleId":"104","severity":1,"message":"118","line":1,"column":38,"nodeType":"106","messageId":"107","endLine":1,"endColumn":44},{"ruleId":"104","severity":1,"message":"119","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":2,"column":22,"nodeType":"106","messageId":"107","endLine":2,"endColumn":27},{"ruleId":"104","severity":1,"message":"120","line":2,"column":52,"nodeType":"106","messageId":"107","endLine":2,"endColumn":66},{"ruleId":"121","severity":1,"message":"122","line":25,"column":6,"nodeType":"123","endLine":25,"endColumn":8,"suggestions":"124"},{"ruleId":"104","severity":1,"message":"125","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":15},{"ruleId":"104","severity":1,"message":"108","line":3,"column":17,"nodeType":"106","messageId":"107","endLine":3,"endColumn":23},{"ruleId":"104","severity":1,"message":"126","line":3,"column":25,"nodeType":"106","messageId":"107","endLine":3,"endColumn":33},{"ruleId":"104","severity":1,"message":"127","line":4,"column":5,"nodeType":"106","messageId":"107","endLine":4,"endColumn":10},{"ruleId":"104","severity":1,"message":"128","line":14,"column":10,"nodeType":"106","messageId":"107","endLine":14,"endColumn":22},{"ruleId":"104","severity":1,"message":"129","line":107,"column":13,"nodeType":"106","messageId":"107","endLine":107,"endColumn":16},{"ruleId":"100","replacedBy":"130"},{"ruleId":"102","replacedBy":"131"},{"ruleId":"104","severity":1,"message":"119","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":3,"column":22,"nodeType":"106","messageId":"107","endLine":3,"endColumn":27},{"ruleId":"104","severity":1,"message":"132","line":1,"column":13,"nodeType":"106","messageId":"107","endLine":1,"endColumn":18},{"ruleId":"104","severity":1,"message":"119","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":3,"column":22,"nodeType":"106","messageId":"107","endLine":3,"endColumn":27},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"no-unused-vars","'AvatarChangeColor' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'hairColors' is assigned a value but never used.","'faceColors' is assigned a value but never used.","'clothColors' is assigned a value but never used.","'face' is assigned a value but never used.","'useState' is defined but never used.","'scene' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useRef' is defined but never used.","'sceneSetup' is defined but never used.","'takeScreenshot' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'activeBGIndex', 'bgs', and 'bgsNames'. Either include them or remove the dependency array.","ArrayExpression",["135"],"'stats' is defined but never used.","'controls' is defined but never used.","'clock' is assigned a value but never used.","'addBacklight' is defined but never used.","'ear' is assigned a value but never used.",["133"],["134"],"'THREE' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},"Update the dependencies array to be: [activeBGIndex, bgs, bgsNames]",{"range":"138","text":"139"},[651,653],"[activeBGIndex, bgs, bgsNames]"]