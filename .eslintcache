[{"/Users/admin/Desktop/solar/src/index.js":"1","/Users/admin/Desktop/solar/src/serviceWorker.js":"2","/Users/admin/Desktop/solar/src/App.js":"3","/Users/admin/Desktop/solar/src/UI.js":"4","/Users/admin/Desktop/solar/src/Cat.js":"5","/Users/admin/Desktop/solar/src/AvatarChange.js":"6","/Users/admin/Desktop/solar/src/UI/AvatarChange.js":"7","/Users/admin/Desktop/solar/src/setup.js":"8","/Users/admin/Desktop/solar/src/Animate.js":"9","/Users/admin/Desktop/solar/src/helpers.js":"10","/Users/admin/Desktop/solar/src/settings.js":"11","/Users/admin/Desktop/solar/src/ScreenShot.js":"12","/Users/admin/Desktop/solar/src/sceneItems.js":"13","/Users/admin/Desktop/solar/src/ModelLoader.js":"14"},{"size":481,"mtime":1617064550418,"results":"15","hashOfConfig":"16"},{"size":5182,"mtime":1617064550460,"results":"17","hashOfConfig":"16"},{"size":248,"mtime":1617139549286,"results":"18","hashOfConfig":"16"},{"size":1866,"mtime":1617410923139,"results":"19","hashOfConfig":"16"},{"size":878,"mtime":1617338637614,"results":"20","hashOfConfig":"16"},{"size":2048,"mtime":1617338637614,"results":"21","hashOfConfig":"16"},{"size":1658,"mtime":1617338637615,"results":"22","hashOfConfig":"16"},{"size":3980,"mtime":1617410923143,"results":"23","hashOfConfig":"16"},{"size":623,"mtime":1617338637613,"results":"24","hashOfConfig":"16"},{"size":846,"mtime":1617356404388,"results":"25","hashOfConfig":"16"},{"size":326,"mtime":1617358010434,"results":"26","hashOfConfig":"16"},{"size":866,"mtime":1617126901785,"results":"27","hashOfConfig":"16"},{"size":6659,"mtime":1617410923140,"results":"28","hashOfConfig":"16"},{"size":1018,"mtime":1617354114569,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"gwidjz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/admin/Desktop/solar/src/index.js",[],["64","65"],"/Users/admin/Desktop/solar/src/serviceWorker.js",[],"/Users/admin/Desktop/solar/src/App.js",[],"/Users/admin/Desktop/solar/src/UI.js",["66","67","68","69","70","71"],"/Users/admin/Desktop/solar/src/Cat.js",["72","73","74"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { sceneSetup, scene ,takeScreenshot} from \"./setup\";\nimport { startAnimationLoop } from \"./Animate\";\n// import SH from \"./ScreenShoot\"\n\nexport default function Cat({ handleFullScreen }) {\n  const textInput = useRef(null);\n\n  useEffect(() => {\n    const canvasTarget = textInput.current;\n    sceneSetup(canvasTarget);\n    // setInterval(startAnimationLoop,1000)\n    startAnimationLoop()\n    \n  }, []);\n\n  return (\n    <React.Fragment>\n      <div ref={textInput} className=\"canvas\"></div>\n     <div className=\"box\">\n\n      <button className=\"SH\" onClick={()=>takeScreenshot(1028*2 ,1028*2 )} className=\"SH\">Download image</button>\n</div>\n    </React.Fragment>\n  );\n}\n\n//clean up to prevent memory leak\n//   componentWillUnmount() {\n//     window.cancelAnimationFrame(requestID);\n//     controls.dispose();\n//   }\n","/Users/admin/Desktop/solar/src/AvatarChange.js",["75","76","77","78","79"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { sceneSetup, scene, changeSceneBackground ,takeScreenshot ,render} from \"./setup\";\n\n\nexport default function AC({ title , mesh , colors  }) {\n  const bgs = {\n    gray: 0xaaaaaa,\n    yellow:0xFFEB3B,\n    Green1:0x69F0AE,\n    cyan:0x00E5FF,\n    Teal:0x1DE9B6,\n    Purple:0x651FFF,\n    indigo:0x3D5AFE,\n    coolRed:0xFF1744,\n    Pink:0xF50057,\n    red: 0xff0000,\n    green: 0x00ff00,\n    blue: 0x0000ff,\n  };\n  const bgsNames = Object.keys(bgs);\n\n  const [activeBGIndex, setactiveBGIndex] = useState(0);\n  useEffect(() => {\n    changeSceneBackground(bgs[bgsNames[activeBGIndex]]);\n  }, []);\n\n  function syencChangeBackground(index) {\n    setactiveBGIndex(index);\n    changeSceneBackground(bgs[bgsNames[index]]);\n    render()\n  }\n\n  function onBGChange(index) {\n    //   index == 1 => left , index==0 => right\n\n    if (index) {\n      activeBGIndex < bgsNames.length - 1\n        ? syencChangeBackground(activeBGIndex + 1)\n        : syencChangeBackground(0);\n    } else {\n        activeBGIndex > 0\n        ? syencChangeBackground(activeBGIndex - 1)\n        : syencChangeBackground(bgsNames.length - 1);\n    }\n  }\n\n  return (\n      \n    <div className=\"box\">\n        <div className=\"title\">{title}</div>\n        <div className=\"change\">\n            <button className=\"l-btn btn\" onClick={()=>onBGChange(0)}>{`<`}</button>\n            <span className=\"center\">{bgsNames[activeBGIndex]}</span>\n            <button className=\"r-btn btn\" onClick={()=>onBGChange(1)}>{`>`}</button>\n        </div>\n    </div>\n    // <div className=\"container\">\n    //   <button onClick={() => onBGChange(0)}>{`<`}</button>\n    //   <span className=\"title\">{bgsNames[activeBGIndex]}</span>\n    //   <button onClick={() => onBGChange(1)}>{`>`}</button>\n      // <button onClick={()=>takeScreenshot(2000 ,2000 )} className=\"SH\">Take SH</button>\n    // </div>\n  );\n}\n\n\n//clean up to prevent memory leak\n//   componentWillUnmount() {\n//     window.cancelAnimationFrame(requestID);\n//     controls.dispose();\n//   }\n","/Users/admin/Desktop/solar/src/UI/AvatarChange.js",["80","81"],"import * as THREE from \"three\";\nimport React, { useState,useEffect} from \"react\";\nimport { sceneSetup, scene ,render} from \"../setup\";\n\nfunction changeColor(mesh,color){\n  console.log(\"Change color\", mesh)\n  mesh.material.color = new THREE.Color(color)\n}\n\n// changeColor(cloth,0xf07f7f)\n// changeColor(cloth,0x714141)\n// changeColor(hair,0x4e1325)\n// changeColor(face,0xa5977e)\n\nexport default function Cat({ title , mesh , colors  }) {\n  const colNames = Object.keys(colors);\n\n  const [activeBGIndex, setactiveBGIndex] = useState(0);\n  useEffect(() => {\n    // changeColor(mesh,colors[colNames[activeBGIndex]])\n    // changeSceneBackground(colors[colNames[activeBGIndex]]);\n  }, []);\n\n  function syencChangeBackground(index) {\n    setactiveBGIndex(index);\n    changeColor(mesh,colors[colNames[index]])\n    render()\n\n    // changeSceneBackground(colors[colNames[index]]);\n  }\n\n  function handleChange(index) {\n    //   index == 1 => left , index==0 => right\n\n    if (index) {\n      activeBGIndex < colNames.length - 1\n        ? syencChangeBackground(activeBGIndex + 1)\n        : syencChangeBackground(0);\n    } else {\n        activeBGIndex > 0\n        ? syencChangeBackground(activeBGIndex - 1)\n        : syencChangeBackground(colNames.length - 1);\n    }\n  }\n\n\n  return (\n    \n    <div className=\"box\">\n        <div className=\"title\">{title}</div>\n        <div className=\"change\">\n            <button className=\"l-btn btn\" onClick={()=>handleChange(1)}>{`<`}</button>\n            <span className=\"center\">{colNames[activeBGIndex]}</span>\n            <button className=\"r-btn btn\" onClick={()=>handleChange(0)}>{`>`}</button>\n        </div>\n    </div>\n  );\n}\n","/Users/admin/Desktop/solar/src/setup.js",[],"/Users/admin/Desktop/solar/src/Animate.js",["82","83","84"],"// اشطر\nimport * as THREE from \"three\";\nimport { stats, render, controls } from \"./setup\";\nvar clock = new THREE.Clock();\nlet generalTime = 0;\n\n\nlet requestID;\n// this function is heavy , OPTIMIZE it as could as possible\nconst startAnimationLoop = (e) => {\n  //   console.log(\"EEEE:\",e)\n  //   material.uniforms.time.value = e/10000;\n  // console.log(clock.elapsedTime)\n  // stats.begin();\n  // generalTime = clock.elapsedTime;\n\n  render();\n  \n  // controls.update();\n  // stats.end();\n  // requestID = window.requestAnimationFrame(startAnimationLoop);\n};\n\nexport {\n  startAnimationLoop,\n  requestID,\n  generalTime,\n};\n","/Users/admin/Desktop/solar/src/helpers.js",[],"/Users/admin/Desktop/solar/src/settings.js",[],"/Users/admin/Desktop/solar/src/ScreenShot.js",[],"/Users/admin/Desktop/solar/src/sceneItems.js",["85"],"import * as THREE from \"three\";\nimport { scene ,render,renderer} from \"./setup\";\nimport { loadModel } from \"./ModelLoader\";\nimport {extract} from \"./UI\"\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader';\n\n// const hat = require(\"./Example_all feature.glb\").default;\n// const earth = require(\"./Avatar3.glb\").default;\nconst earth = require(\"./model/GLB/Avatar (ALL)_GLB.glb\").default;\n// const earth = require(\"./model/f.glb\").default;\nconst hdrbg = require(\"./model/Texture/courtyard_2k.hdr\")\nvar face, hair, cloth\n// console.log(\"HFFHFHHF\",hdrbg.default)\nfunction addLights() {\n  const amplight = new THREE.AmbientLight(\"#ffffff\", 0.1);\n  let lightBack = new THREE.SpotLight(0xffffff, 1.4);\n  let lightFront = new THREE.SpotLight(0xffffff, 0.5);\n  let hemiLight = new THREE.HemisphereLight(0xffeeb1,0x080820,2)\n    hemiLight.position.set(0,1,10)\n\n    lightFront.position.set(1.1, 3, 3.7);\n    lightBack.position.set(-10, 9,6);\n  \n  // lightBack.castShadow = true\n  lightFront.castShadow = true\n\n\n  // Backlight:\n\n  const tl = new THREE.PointLight(0xffffff,0.4)\n  const tr = new THREE.PointLight(0xffffff,0.4)\n  const bl = new THREE.PointLight(0xffffff,0.4)\n  const br = new THREE.PointLight(0xffffff,0.4)\n  const xd = 5\n  const zd = 2\n  const yd = 5\n  const rightShift = 1\n  tl.position.set(xd+rightShift,yd,-zd)\n  tr.position.set(-xd+rightShift,yd,-zd)\n  bl.position.set(xd+rightShift,-yd,-zd)\n  br.position.set(-xd+rightShift,-yd,-zd)\n  tl.castShadow = true\n  tr.castShadow = true\n  bl.castShadow = true\n  br.castShadow = true\n\nscene.add(tl)\nscene.add(tr)\nscene.add(bl)\nscene.add(br)\n// scene.add(new THREE.PointLightHelper(tl))\n// scene.add(new THREE.PointLightHelper(tr))\n// scene.add(new THREE.PointLightHelper(bl))\n// scene.add(new THREE.PointLightHelper(br))\n\n  const rectLight = new THREE.RectAreaLight( 0xffffff, 1,  10, 10 );\n  rectLight.position.set( 2, 0, 5 );\n  rectLight.lookAt( 0, 0, 0 );\n\n  // scene.add(hemiLight)\n\n  \n  \n\n\n  // lightFront.shadow.bias = -0.0001;\n  lightFront.shadow.mapSize.width = 1024*16; // default\nlightFront.shadow.mapSize.height = 1024*16; // default\n\n\nlightBack.shadow.mapSize.width =  1024*16; // default\nlightBack.shadow.mapSize.height =  1024*16; // default\n\n\nlightFront.shadow.camera.near = 0.1; // default\nlightFront.shadow.camera.far = 500; // default\nlightFront.shadow.focus = 1; // default\n// lightFront.shadow.radius =10\nlightFront.shadow.normalBias =0.08\n\n\n \n\n  function setLighting(){\n\n    \n    new RGBELoader()\n    .setDataType( THREE.UnsignedByteType ) // alt: FloatType, HalfFloatType\n    .load( hdrbg.default, function ( texture, textureData ) {\n      var envMap = pmremGenerator.fromEquirectangular( texture ).texture;\n\n      // scene.background = envMap;\n      scene.environment = envMap;\n\n      texture.dispose();\n      pmremGenerator.dispose();\n\n      render();\n\n    } );\n\n    var pmremGenerator = new THREE.PMREMGenerator( renderer );\n    pmremGenerator.compileEquirectangularShader();\n\n}\nsetLighting()\n  // scene.add(amplight);\n  // scene.add(lightBack);\n  scene.add(lightFront);\n  scene.add( rectLight ) \n\n  // scene.add( new THREE.SpotLightHelper(lightBack,\"#ff00cc\") );\n  // scene.add( new THREE.SpotLightHelper( lightFront ,\"#ccff00\"));\n}\n\n\nfunction extractPart(){\n}\n\nconst addItem = () => {\n  loadModel(earth , {x:0,y:0,z:0})\n    .then((e) => {\n      function extractMesh(name){\n        return e.scene.getChildByName(name)\n      }\n   \n      cloth = extractMesh(\"cloth\")\n       face = extractMesh(\"face\")\n       hair = extractMesh(\"hair\")\n       console.log(cloth)\n\n      //  hair.material.roughness = 0.5\n      // cloth.scale.set(1.3,1,1.8)\n      // (new THREE.Vector3(2,2,2))\n      // //  cloth.castShadow = true; \n      //  cloth.receiveShadow = true;\n\n        face.castShadow = false; \n       face.receiveShadow = true;\n      // //  face.material.wireframe = true\n\n       hair.castShadow = true; \n      //  hair.receiveShadow = false;\n// face.material.roughness=0.5\n// cloth.material.roughness=0.6\n\n      // //  sphere.castShadow = true; \n      // //  sphere.receiveShadow = true;\n\n      //  extract({cloth,face,hair})\n      //  console.log(\"face lol\",face)\n      // const bg  = extractMesh(\"bg\")\n      // const hair_mask = extractMesh(\"hair_mask\")\n      // const hat = extractMesh(\"hat\")\n      // const hat_mask = extractMesh(\"hat_mask\")\n      // const tounge = extractMesh(\"Roundcube006\")\n      // const nose = extractMesh(\"nose\")\n      // const nech = extractMesh(\"Cylinder\")\n      // const ear = extractMesh(\"Roundcube001\")\n      // const eye = extractMesh(\"eye\")\n      // const eyebrow = extractMesh(\"eyebrow\")\n      \n      // nose.castShadow = true; \n      // tounge.receiveShadow = true\n\n      // ear.receiveShadow = true\n      // nech.receiveShadow =true\n      // eyebrow.receiveShadow = true\n      // eyebrow.castShadow = true\n\n      // tounge.material.color = new THREE.Color(0xaa5555)\n      // face.material.color = new THREE.Color(0xc58c85)\n      // cloth.material.color = new THREE.Color(0x888888)\n      // hair.material.color = new THREE.Color(0x3D5AFE)\n      // eye.material.color = new THREE.Color(0x333333)\n      // eyebrow.material.color = new THREE.Color(0x444444)\n       \n\n      // bg.visible = false\n   \n      // hat_mask.visible = false\n\n\n      console.log(\"FFFF\",e.scene.children)\n\n      // overlay start\n      const hat = extractMesh(\"hat\")\n      const hair_mask = extractMesh(\"hair_mask\")\n      hat.castShadow = true\n      hair_mask.castShadow=true\n      hair_mask.receiveShadow = true\n      hair_mask.visible =false\n      hat.visible = false\n      // const hair = extractMesh(\"hair\")\n      // hair.visible = false\n      console.log(\"hair\",hair)\n\n      scene.add(e.scene);\n      render()\n    })\n  addLights();\n};\n\nexport { addItem ,face, hair, cloth , extractPart};\n","/Users/admin/Desktop/solar/src/ModelLoader.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":3,"column":8,"nodeType":"92","messageId":"93","endLine":3,"endColumn":20},{"ruleId":"90","severity":1,"message":"94","line":8,"column":7,"nodeType":"92","messageId":"93","endLine":8,"endColumn":17},{"ruleId":"90","severity":1,"message":"95","line":18,"column":7,"nodeType":"92","messageId":"93","endLine":18,"endColumn":17},{"ruleId":"90","severity":1,"message":"96","line":27,"column":7,"nodeType":"92","messageId":"93","endLine":27,"endColumn":18},{"ruleId":"90","severity":1,"message":"97","line":63,"column":8,"nodeType":"92","messageId":"93","endLine":63,"endColumn":12},{"ruleId":"90","severity":1,"message":"98","line":64,"column":8,"nodeType":"92","messageId":"93","endLine":64,"endColumn":12},{"ruleId":"90","severity":1,"message":"99","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"100","line":2,"column":22,"nodeType":"92","messageId":"93","endLine":2,"endColumn":27},{"ruleId":"101","severity":1,"message":"102","line":22,"column":76,"nodeType":"103","endLine":22,"endColumn":90},{"ruleId":"90","severity":1,"message":"104","line":1,"column":38,"nodeType":"92","messageId":"93","endLine":1,"endColumn":44},{"ruleId":"90","severity":1,"message":"105","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":20},{"ruleId":"90","severity":1,"message":"100","line":2,"column":22,"nodeType":"92","messageId":"93","endLine":2,"endColumn":27},{"ruleId":"90","severity":1,"message":"106","line":2,"column":52,"nodeType":"92","messageId":"93","endLine":2,"endColumn":66},{"ruleId":"107","severity":1,"message":"108","line":25,"column":6,"nodeType":"109","endLine":25,"endColumn":8,"suggestions":"110"},{"ruleId":"90","severity":1,"message":"105","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":20},{"ruleId":"90","severity":1,"message":"100","line":3,"column":22,"nodeType":"92","messageId":"93","endLine":3,"endColumn":27},{"ruleId":"90","severity":1,"message":"111","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":15},{"ruleId":"90","severity":1,"message":"112","line":3,"column":25,"nodeType":"92","messageId":"93","endLine":3,"endColumn":33},{"ruleId":"90","severity":1,"message":"113","line":4,"column":5,"nodeType":"92","messageId":"93","endLine":4,"endColumn":10},{"ruleId":"90","severity":1,"message":"114","line":4,"column":9,"nodeType":"92","messageId":"93","endLine":4,"endColumn":16},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'AvatarChange' is defined but never used.","Identifier","unusedVar","'hairColors' is assigned a value but never used.","'faceColors' is assigned a value but never used.","'clothColors' is assigned a value but never used.","'hair' is assigned a value but never used.","'face' is assigned a value but never used.","'useState' is defined but never used.","'scene' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useRef' is defined but never used.","'sceneSetup' is defined but never used.","'takeScreenshot' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'activeBGIndex', 'bgs', and 'bgsNames'. Either include them or remove the dependency array.","ArrayExpression",["117"],"'stats' is defined but never used.","'controls' is defined but never used.","'clock' is assigned a value but never used.","'extract' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},"Update the dependencies array to be: [activeBGIndex, bgs, bgsNames]",{"range":"120","text":"121"},[651,653],"[activeBGIndex, bgs, bgsNames]"]